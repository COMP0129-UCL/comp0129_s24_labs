/* Software License Agreement (MIT License)
 *
 *  Copyright (c) 2019-, Dimitrios Kanoulas
 *
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of the copyright holder(s) nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */

#pragma once

// ros includes
#include <ros/ros.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Quaternion.h>
#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <tf2/LinearMath/Quaternion.h>
#include <tf2/LinearMath/Scalar.h>
#include <tf2_geometry_msgs/tf2_geometry_msgs.h>
#include <tf2_ros/transform_listener.h>

// standard c++ library includes (std::string, std::vector)
#include <string>
#include <vector>

// headers generated by catkin for the custom services we have made
#include <moveit_tutorial/set_arm.h>
#include <moveit_tutorial/set_gripper.h>
#include <moveit_tutorial/add_collision.h>

/** \brief Class advertising MoveIt! ROS services
  *
  * This class contains callback functions for services which use MoveIt to
  * move the robot. Here in this file we declare all of the functions and
  * variables that make up the class. The code for each function is in the
  * moveit_tutorial.cpp file.
  *
  * \author Luke Beddow
  * \author Maria Stamatopoulou
  */
class SrvClass
{

public: // set all following functions/variables to public access

  /** \brief  Class constructor. 
    *
    * \input[in] nh ROS node handle
    */
  SrvClass(ros::NodeHandle& nh);

  /** \brief Service callback function for moving the arm. 
    *
    * \input[in] request service request message 
    * \input[in] response service response message
    *  
    * \return true if service succeeds
    */
  bool 
  setArmCallback(moveit_tutorial::set_arm::Request &request,
    moveit_tutorial::set_arm::Response &response);
  
  /** \brief Service callback function for setting the gripper fingers to a specific width. 
    *
    * \input[in] request service request message 
    * \input[in] response service response message
    *  
    * \return true if service succeeds
    */
  bool 
  setGripperCallback(moveit_tutorial::set_gripper::Request &request,
    moveit_tutorial::set_gripper::Response &response);
  
  /** \brief Service callback function for adding collision objects. 
    *
    * \input[in] request service request message 
    * \input[in] response service response message
    *  
    * \return true if service succeeds
    */
  bool 
  addCollisionCallback(moveit_tutorial::add_collision::Request &request,
    moveit_tutorial::add_collision::Response &response);

  /** \brief MoveIt function for moving the move_group to the target position
    *
    * \input[in] target_pose pose to move the arm to
    *
    * \return true if moved to target position 
    */
  bool 
  moveArm(geometry_msgs::Pose target_pose);

  /** \brief MoveIt function for moving the gripper fingers to a new position. 
    *
    * \input[in] width desired gripper finger width
    *
    * \return true if gripper fingers are moved to the new position
    */
  bool 
  moveGripper(float width);

 
  /** \brief MoveIt function for adding a cuboid collision object in RViz
    * and the MoveIt planning scene
    *
    * \input[in] object_name name for the new object to be added
    * \input[in] centre point at which to add the new object
    * \input[in] dimensions dimensions of the cuboid to add in x,y,z
    * \input[in] orientation rotation to apply to the cuboid before adding
    */
  void
  addCollisionObject(std::string object_name, geometry_msgs::Point centre, 
    geometry_msgs::Vector3 dimensions, geometry_msgs::Quaternion orientation);
  
  /* Variables */

  /** \brief Define some useful constant values. */
  std::string base_frame_ = "panda_link0";
  double gripper_open_ = 80e-3;
  double gripper_closed_ = 0.0;

  /** \brief Node handle. */
  ros::NodeHandle nh_;

  /** \brief  Server for advertising set_arm_srv_  service.  */
  ros::ServiceServer set_arm_srv_;

  /** \brief  Server for advertising set_arm_srv_  service.  */
  ros::ServiceServer set_gripper_srv_;

  /** \brief  Server for advertising add_collision_srv_  service. */
  ros::ServiceServer add_collision_srv_;

  /** \brief MoveIt interface to move groups to seperate the arm and the gripper,
    * these are defined in urdf. */
  moveit::planning_interface::MoveGroupInterface arm_group_{"panda_arm"};
  moveit::planning_interface::MoveGroupInterface hand_group_{"hand"};

  /** \brief MoveIt interface to interact with the moveit planning scene 
    * (eg collision objects). */
  moveit::planning_interface::PlanningSceneInterface planning_scene_interface_;

};